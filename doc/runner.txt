*runner.txt*   easily compile and run code.
*runner* *vim-runner*

                      ____ _   _ ____  ____  _____  ____                     ~
                     / ___| | | |  _ \|  _ \| ___ |/ ___)                    ~
                    | |   | |_| | | | | | | | ____| |                        ~
                    |_|   |____/|_| |_|_| |_|_____|_|                        ~
                                                                             ~
      A simple Vim plugin which uses <F5> to compile and run code.

==============================================================================
CONTENTS                                                  *runner-contents*
 1. Usage ..................................................... |runner_usage|
 2. Mappings ............................................... |runner_mappings|
  2.1 runner_run_key .................................. |mapping_runner_n_key|
 3. Configuration ..................................... |runner_configuration|
  3.1  g:runner_use_default_mapping ...... |config_runner_use_default_mapping|
  3.2  g:runner_is_save_first .................. |config_runner_is_save_first|
  3.3  g:runner_print_timestamp .............. |config_runner_print_timestamp|
  3.4  g:runner_print_time_usage ............ |config_runner_print_time_usage|
  3.5  g:runner_show_info .......................... |config_runner_show_info|
  3.6  g:runner_auto_remove_tmp .............. |config_runner_auto_remove_tmp|
  3.7  g:runner_run_key .............................. |config_runner_run_key|
  3.8  g:runner_tmp_dir .............................. |config_runner_tmp_dir|
  3.9  g:runner_is_with_ale ...................... |config_runner_is_with_ale|
  3.10 g:runner_is_with_md ........................ |config_runner_is_with_md|
  3.11 g:runner_c_executable .................... |config_runner_c_executable|
  3.12 g:runner_cpp_executable ................ |config_runner_cpp_executable|
  3.13 g:runner_rust_executable .............. |config_runner_rust_executable|
  3.14 g:runner_python_executable .......... |config_runner_python_executable|
  3.15 g:runner_lisp_executable .............. |config_runner_lisp_executable|
  3.16 g:runner_c_compile_options .......... |config_runner_c_compile_options|
  3.17 g:runner_cpp_compile_options ...... |config_runner_cpp_compile_options|
  3.18 g:runner_rust_compile_options .... |config_runner_rust_compile_options|
  3.19 g:runner_c_run_options .................. |config_runner_c_run_options|
  3.20 g:runner_cpp_run_options .............. |config_runner_cpp_run_options|
  3.21 g:runner_rust_run_backtrace ........ |config_runner_rust_run_backtrace|
  3.22 g:runner_rust_run_options ............ |config_runner_rust_run_options|
 4. License ................................................. |runner_license|
 5. Bugs ....................................................... |runner_bugs|

==============================================================================
1. Usage                                                       *runner_usage*

I just lazy that want to use a key to compile and run a code without leaving
vim like some IDEs. Therefore, I write this plugin that allow you to just
press <F5> and it will compile and run code.
Now this plugin support c, cpp, rust, python, lisp,
markdown(need other plugin).

==============================================================================
2. Mappings                                                 *runner_mappings*

There one key mapping by default for your convenience.

------------------------------------------------------------------------------
2.1 runner_run_key                                      mapping_runner_n_key*

Bound to: <F5>

Compile and run a code which is in current buffer.
More specifically, there are four function (Before, Compile, Run, After) to
be called in whole process.

==============================================================================
3. Configuration                                       *runner_configuration*

You can configure the following settings.

------------------------------------------------------------------------------
3.1  g:runner_use_default_mapping         *config_runner_use_default_mapping*

Set this to 0 to not use default mappings. >
    let g:runner_use_default_mapping = 0
<

Default: 1 (Enable default mappings)

------------------------------------------------------------------------------
3.2  g:runner_is_save_first                     *config_runner_is_save_first*

Set this to 0 to not save buffer before compile and run. >
    let g:runner_is_save_first = 0
<

Default: 1 (Enable save first)

------------------------------------------------------------------------------
3.3  g:runner_print_timestamp                 *config_runner_print_timestamp*

Set this to 0 to not print timestamp on the top of output messages. >
    let g:runner_print_timestamp = 0
<

Default: 1 (Enable print timestamp)

------------------------------------------------------------------------------
3.4  g:runner_print_time_usage               *config_runner_print_time_usage*

Set this to 0 to not print time usage about whole process. >
    let g:runner_print_time_usage = 0
<

Default: 1 (Enable print time usage)

------------------------------------------------------------------------------
3.5  g:runner_show_info                             *config_runner_show_info*

Set this to 0 to not show warning info. >
    let g:runner_show_info = 0
<

Default: 1 (show info)

------------------------------------------------------------------------------
3.6  g:runner_auto_remove_tmp                 *config_runner_auto_remove_tmp*

Set this to 1 to remove tmp files automaticlly. >
    let g:runner_auto_remove_tmp = 1
<

Default: 0 (not to remove tmp file automaticlly)

------------------------------------------------------------------------------
3.7  g:runner_run_key                                 *config_runner_run_key*

Change key mapping which comment code in normal mode.
You can set it to F8 >
    let g:commenter_n_key = "<F8>"
<

Default: "<F5>"

------------------------------------------------------------------------------
3.8  g:runner_tmp_dir                                 *config_runner_tmp_dir*

Change tmp dir for output.
If want to use current dir can change to >
    let g:runner_tmp_dir = "./"
<

Default: "/tmp/vim-runner/"

------------------------------------------------------------------------------
3.9  g:runner_is_with_ale                         *config_runner_is_with_ale*

Set this to 1 to represent that you alse use w0rp/ale. >
    let g:runner_is_with_ale = 1
<

Default: 0 (without w0rp/ale)

------------------------------------------------------------------------------

3.10 g:runner_is_with_md                           *config_runner_is_with_md*

Set this to 1 to represent that you alse use iamcco/markdown-preview.vim. >
    let g:runner_is_with_md = 1
<

Default: 0 (without iamcco/markdown-preview.vim)

------------------------------------------------------------------------------
3.11 g:runner_c_executable                       *config_runner_c_executable*

Set c compiler's path. >
    let g:runner_c_executable = "/bin/gcc"
<

Default: "gcc"

------------------------------------------------------------------------------
3.12 g:runner_cpp_executable                   *config_runner_cpp_executable*

Set c++ compiler's path. >
    let g:runner_cpp_executable = "/bin/g++"
<

Default: "g++"

------------------------------------------------------------------------------
3.13 g:runner_rust_executable                 *config_runner_rust_executable*

Set rust compiler's path. >
    let g:runner_rust_executable = "/bin/rustc"
<

Default: "cargo"

------------------------------------------------------------------------------
3.14 g:runner_python_executable             *config_runner_python_executable*

Set python interpreter's path. >
    let g:runner_python_executable = "python"
<

Default: "python3"

------------------------------------------------------------------------------
3.15 g:runner_lisp_executable                 *config_runner_lisp_executable*

Set lisp interpreter's path. >
    let g:runner_lisp_executable = "sbcl --script"
<

Default: "sbcl --script"

------------------------------------------------------------------------------
3.16 g:runner_c_compile_options             *config_runner_c_compile_options*

Set c compile options for gnu99. >
    let g:runner_c_compile_options = "-std=gnu99 -Wall"
<

Default: "-std=c11 -Wall"

------------------------------------------------------------------------------
3.17 g:runner_cpp_compile_options         *config_runner_cpp_compile_options*

Set cpp compile options for gnu99. >
    let g:runner_cpp_compile_options = "-std=c++11 -Wall -lm -lcrypt -O2 -pipe"
<

Default: "-std=c++11 -Wall"

------------------------------------------------------------------------------
3.18 g:runner_rust_compile_options       *config_runner_rust_compile_options*

Default: ""

------------------------------------------------------------------------------
3.19 g:runner_c_run_options                     *config_runner_c_run_options*

Set run options for redirection. >
    let g:runner_c_run_options = "< test.in > test.out"
<

Default: ""

------------------------------------------------------------------------------
3.20 g:runner_cpp_run_options                 *config_runner_cpp_run_options*

Set run options for redirection. >
    let g:runner_cpp_run_options = "< test.in > test.out"
<

Default: ""

------------------------------------------------------------------------------
3.21 g:runner_rust_run_backtrace           *config_runner_rust_run_backtrace*

Set not to print backtrace when rust run in error. >
    let g:runner_rust_run_backtrace = 0
<

Default: 1 (Enable to print backtrace)

------------------------------------------------------------------------------
3.22 g:runner_rust_run_options               *config_runner_rust_run_options*

Set run options for redirection. >
    let g:runner_rust_run_options = "< test.in > test.out"
<

Default: ""

==============================================================================
4. License                                                   *runner_license*

vim-runner is MIT licensed.

==============================================================================
5. Bugs                                                         *runner_bugs*

==============================================================================
